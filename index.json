[{
    "title": "UIKit学习—如何弹出对话框",
    "date": "August 30, 2020",
    "description": "",
    "body": " 最近开始阅读raywenderlich的iOS Apprentice1来学习UIKit 和 SwiftUI。 第一个app是Bullseye, 一个简单的小游戏，考验谁的估计更准确（类似于商场门口按10秒得优惠券的小游戏）。这也是我学习CS193P期间的补充。 首先要解决的就是弹出对话框的使用，本文通过简单的程序说明弹出式对话框的使用方法。\n 前言 弹出式对话框在iOS中经常使用，无论是APP Store中下载App时，还是输错密码的提示，很多地方都在使用。而且其程序比较简单，一般封装起来使用。\n本文只是以例子的形式简单的实现弹出对话框的使用。\n准备 操作系统：macOS Catalina 10.15.6 Xcode: Version 11.3.1\n开始 首先我们需要新建一个Xcode project，选择iOS下Single View App模版，然后给文件命名。注意 Language选择 Swift ，Use Interface选择 Storyboard ，因为我们要使用UIKit，而且不需要 Use Core Data, Include Unit Tests 和 Include UI Tests。\n创建成功后，我们首先要创建一个按键来触发弹出对话框的动作，就像你在手机上滑或者按按键一样。我们找到左侧Project navigator，点击Main.storyboard来编辑我们的视图。点击右上边工具条中加号图案，会显示出可用的控件列表。我们只需要添加一个按键（Button）即可。将它拖到Interface Bulider中会显示出其与边缘的位置关系，我们可以靠左边，靠右边或者放在视图正中间。双击Button 可以给它重命名（它默认叫Button，我改为了Tap）。通过调整它边框的大小我们可以调整它所占的范围。字体可以在右边栏Button中Font中修改。\n点击左侧Project navigator中ViewController.swift来添加本次实验的程序。ViewController.swift是一段swift程序来允许我们对视图进行控制。每一个视图都应该对应一个swift文件。 在class ViewController中添加下列程序：\n@IBAction func showAlert(){ } 这时候运行程序是没有反应的。因为我们按键Tap没有与showAlert之间建立联系，同时我们的showAlert中也没有要执行的内容。\n在Main.storyboard中选中Tap按住control键将其拖到View Controller Scence中的View Controller, 会弹Action Segue，点击Sent Events中的项选中showAlert，就可以建立 Tap与showAlert之间的联系（在右边栏箭头型图标栏中可以看到或着此时打开ViewController.swift我们也能看到showAlert()行前面的数字变成了实心圆）。\n 或者双屏显示内容的话之间将其指向ViewController.swift 中（这样会自动添加程序，给函数命名，不用自己添加之前的程序，就直接建立了按键与程序之间的联系）。\n 然后在ViewController.swift中添加程序：\n@IBAction func showAlert(){ let alert = UIAlertController(title: \u0026quot;需验证\u0026quot;, message: \u0026quot;请确认下载\u0026quot;, preferredStyle: .alert) let actionTrue = UIAlertAction(title: \u0026quot;Yes\u0026quot;, style: .default, handler: nil) alert.addAction(actionTrue) present(alert, animated: true, completion: nil) } 编译运行，就能看到当按下按键时会弹出对话框。\nUIAlertController就是一个向用户显示警报消息的对象（object）。其中preferredStyle表示首选风格，是个UIAlertController.Style类型（枚举型，0 - actionSheet(以工作表形式显示) ， 1- alert（以模态（modally）形式显示））。\nUIAlertAction表示当对话框弹出时用户可以进行的动作。其中handler 表示按下这个键后的动作。\npresent() 表示将当前视图呈现到视图编辑器上显示。animated(Bool)表示是否带动画效果，completion表示执行完成后要执行的函数。这里的动画效果x是系统自带的几种动画，可以自己切换成不是系统自带的动画，动画效果指南后面之后更新这部分内容present动画效果。\n我们也可以给对话框增加几个按键，通过增加UIAlertAction，例如\n@IBAction func showAlert(){ let alert = UIAlertController(title: \u0026quot;需验证\u0026quot;, message: \u0026quot;请确认下载\u0026quot;, preferredStyle: .alert) let actionTrue = UIAlertAction(title: \u0026quot;Yes\u0026quot;, style: .default, handler: nil) let actionFalse = UIAlertAction(title: \u0026quot;No\u0026quot;, style: .cancel, handler: nil) let actionAndOne = UIAlertAction(title: \u0026quot;and one\u0026quot;, style: .destructive, handler: nil) alert.addAction(actionTrue) alert.addAction(actionTrue) alert.addAction(actionFalse) alert.addAction(actionAndOne) present(alert, animated: true, completion: nil) } 幕后 app是由各种对象组成的，各个对象之间互相发送消息。例如本文中的UIButton对象当它被按下时 会向ViewController发送信息，使其下的不同对象开始工作。iOS程序都是事件驱动的，所以平时它可能一直在休眠，都等待着被触发。按键的按下事件联系着ViewController中的action。当按键被按下时，它向你的视图发送执行showAlert函数信息。而在showAlert内部，ViewController又在UIAlertController中添加了UIAlertAction。为了展示这个alert，视图控制器又发送present信息。然后整个app都通过这种方式进行工作。\n之后它将再次进入休眠，等待着被唤醒\n后记 可以增加函数来增加弹出警告按键后的操作和显示视图后的操作。\nimport UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view. } //显示视图后的操作 func complete() -\u0026gt; () { print(\u0026quot;Hello world\u0026quot;) } @IBAction func showAlert(){ let alert = UIAlertController(title: \u0026quot;需验证\u0026quot;, message: \u0026quot;请确认下载\u0026quot;, preferredStyle: .alert) let actionTrue = UIAlertAction(title: \u0026quot;Yes\u0026quot;, style: .default, handler: nil)//之后的action let actionFalse = UIAlertAction(title: \u0026quot;No\u0026quot;, style: .cancel, handler: nil) let actionAndOne = UIAlertAction(title: \u0026quot;and one\u0026quot;, style: .destructive, handler: nil) alert.addAction(actionTrue) alert.addAction(actionFalse) alert.addAction(actionAndOne) present(alert, animated: true, completion: complete) } } 出来弹窗后会显示Hello world。\n  Joey deVilla. The iOS Apprentice[J]. \u0026#x21a9;\u0026#xfe0e;\n   ",
    "ref": "/blog/dialogpopup/"
  },{
    "title": "关于我",
    "date": "July 22, 2020",
    "description": "我叫冯冲，是一名新手开发者",
    "body": "大家好，我叫冯冲，是一名来自于中国的x新手开发者。\n现在我是天津大学的一名研究生（2019-2021），主要研究超声波辅助加工。 但我喜欢编程，想去开发自己的应用，因此我创建了这个博客，来记录我的学习过程，或者转载别人的技术分享。\n现在我主要学习C++和Swift。\n想要更了解我可以关注我的GitHub [GitHub] (https://github.com/FChong96).\n",
    "ref": "/about/"
  },{
    "title": "欢迎 Welcome",
    "date": "July 2, 2020",
    "description": "Post testing.",
    "body": "这是我第一次发博客，进行测试。\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don't communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren't part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo's internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike's talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ",
    "ref": "/blog/markdown-syntax/"
  },{
    "title": "FC's Blog Test",
    "date": "July 1, 2020",
    "description": "",
    "body": "FC's blog test\nfirst use hugo \u0026ndash;test\n goodbye ",
    "ref": "/post/blog/"
  },{
    "title": "Rich Content",
    "date": "March 10, 2019",
    "description": "A brief description of Hugo Shortcodes",
    "body": "Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n",
    "ref": "/blog/rich-content/"
  },{
    "title": "Placeholder Text",
    "date": "March 9, 2019",
    "description": "Lorem Ipsum Dolor Si Amet",
    "body": "Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n",
    "ref": "/blog/placeholder-text/"
  },{
    "title": "Emoji Support",
    "date": "March 5, 2019",
    "description": "Guide to emoji usage in Hugo",
    "body": "Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }",
    "ref": "/blog/emoji-support/"
  },{
    "title": "The Fox and the Grapes",
    "date": "October 19, 2018",
    "description": "",
    "body": "A Fox one day spied a beautiful bunch of ripe grapes hanging from a vine trained along the branches of a tree. The grapes seemed ready to burst with juice, and the Fox's mouth watered as he gazed longingly at them.\nThe bunch hung from a high branch, and the Fox had to jump for it. The first time he jumped he missed it by a long way. So he walked off a short distance and took a running leap at it, only to fall short once more. Again and again he tried, but in vain.\nNow he sat down and looked at the grapes in disgust.\n\u0026ldquo;What a fool I am,\u0026rdquo; he said. \u0026ldquo;Here I am wearing myself out to get a bunch of sour grapes that are not worth gaping for.\u0026rdquo;\nAnd off he walked very, very scornfully.\nMoral of the story:\n There are many who pretend to despise and belittle that which is beyond their reach.\n ",
    "ref": "/posts/the-fox-and-the-grapes/"
  },{
    "title": "Drakshasava",
    "date": "October 19, 2018",
    "description": "",
    "body": "Drakshasava (Sanskrit: द्राक्षासव) is a traditional Ayurvedic tonic made from grapes. Drakshasava is a weak wine because the grape juice is usually only partially fermented. It is also sometimes prepared by using raisin concentrate. The tonic is claimed to be beneficial for maladies such as lethargy, weakness and heat exhaustion. Drakshasava is believed to address health imbalances arising from an excess of the Vata-Vayu Dosha and is said to be useful in curing cardiac disorders and hemorrhoids in the Ayurvedic system.\nSource: Introduction to Ayurveda, the science of life\n",
    "ref": "/posts/drakshasava/"
  },{
    "title": "Code Demo",
    "date": "October 18, 2018",
    "description": "",
    "body": "Bash #!/bin/bash  ###### CONFIG ACCEPTED_HOSTS=\u0026#34;/root/.hag_accepted.conf\u0026#34; BE_VERBOSE=false if [ \u0026#34;$UID\u0026#34; -ne 0 ] then echo \u0026#34;Superuser rights required\u0026#34; exit 2 fi genApacheConf(){ echo -e \u0026#34;# Host ${HOME_DIR}$1/$2:\u0026#34; } JSON [ { \u0026#34;title\u0026#34;: \u0026#34;apples\u0026#34;, \u0026#34;count\u0026#34;: [12000, 20000], \u0026#34;description\u0026#34;: {\u0026#34;text\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;sensitive\u0026#34;: false} }, { \u0026#34;title\u0026#34;: \u0026#34;oranges\u0026#34;, \u0026#34;count\u0026#34;: [17500, null], \u0026#34;description\u0026#34;: {\u0026#34;text\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;sensitive\u0026#34;: false} } ] Rust fn main() { let greetings = [\u0026#34;Hello\u0026#34;, \u0026#34;Hola\u0026#34;, \u0026#34;Bonjour\u0026#34;, \u0026#34;Ciao\u0026#34;, \u0026#34;こんにちは\u0026#34;, \u0026#34;안녕하세요\u0026#34;, \u0026#34;Cześć\u0026#34;, \u0026#34;Olá\u0026#34;, \u0026#34;Здравствуйте\u0026#34;, \u0026#34;Chào bạn\u0026#34;, \u0026#34;您好\u0026#34;, \u0026#34;Hallo\u0026#34;, \u0026#34;Hej\u0026#34;, \u0026#34;Ahoj\u0026#34;, \u0026#34;سلام\u0026#34;,\u0026#34;สวัสดี\u0026#34;]; for (num, greeting) in greetings.iter().enumerate() { print!(\u0026#34;{} : \u0026#34;, greeting); match num { 0 =\u0026gt; println!(\u0026#34;This code is editable and runnable!\u0026#34;), 1 =\u0026gt; println!(\u0026#34;¡Este código es editable y ejecutable!\u0026#34;), 2 =\u0026gt; println!(\u0026#34;Ce code est modifiable et exécutable !\u0026#34;), 3 =\u0026gt; println!(\u0026#34;Questo codice è modificabile ed eseguibile!\u0026#34;), 4 =\u0026gt; println!(\u0026#34;このコードは編集して実行出来ます！\u0026#34;), 5 =\u0026gt; println!(\u0026#34;여기에서 코드를 수정하고 실행할 수 있습니다!\u0026#34;), 6 =\u0026gt; println!(\u0026#34;Ten kod można edytować oraz uruchomić!\u0026#34;), 7 =\u0026gt; println!(\u0026#34;Este código é editável e executável!\u0026#34;), 8 =\u0026gt; println!(\u0026#34;Этот код можно отредактировать и запустить!\u0026#34;), 9 =\u0026gt; println!(\u0026#34;Bạn có thể edit và run code trực tiếp!\u0026#34;), 10 =\u0026gt; println!(\u0026#34;这段代码是可以编辑并且能够运行的！\u0026#34;), 11 =\u0026gt; println!(\u0026#34;Dieser Code kann bearbeitet und ausgeführt werden!\u0026#34;), 12 =\u0026gt; println!(\u0026#34;Den här koden kan redigeras och köras!\u0026#34;), 13 =\u0026gt; println!(\u0026#34;Tento kód můžete upravit a spustit\u0026#34;), 14 =\u0026gt; println!(\u0026#34;این کد قابلیت ویرایش و اجرا دارد!\u0026#34;), 15 =\u0026gt; println!(\u0026#34;โค้ดนี้สามารถแก้ไขได้และรันได้\u0026#34;), _ =\u0026gt; {}, } } } ",
    "ref": "/posts/code-demo/"
  },{
    "title": "vestibulum vitae dictum aliqua phasellus magnis at",
    "date": "May 23, 2018",
    "description": "vulputate sem sapien felis ullamcorper risus mi eu metus integer posuere fermentum",
    "body": "eu velit magna aliqua hendrerit Cursus non odio nam suspendisse mollis tempus tincidunt, cursus praesent facilisi elementum etiam rhoncus tempor. At penatibus ultrices nulla phasellus mi quis luctus felis ultricies. Urna tempus ac consequat sem sed curabitur justo, quam suspendisse cursus aenean integer tellus consectetur. Sed bibendum hendrerit volutpat fames libero nisl dui, nunc vivamus augue posuere luctus scelerisque ultrices. Do pretium consectetur vestibulum lacinia eget do semper, varius viverra scelerisque madssa semper venenatis cras. Ac pharetra interdum rhoncus eleifend libero bolestie ligula justo.\nMalesuada vel arcu odio scelerisque tellus adipiscing congue vitae erat leo commodo. Rhoncus amet cras curabitur non augue aenean eu nibh nisl orci lorem. Augue rhoncus euismod leo nam netus viverra interdum lectus do quam. Consequat dolor metus urna ultricies mi aliquet dolore dictum. Facilisi facilisis et eiusmod mus orci consectetur dolore ultricies placerat porttitor sed. Est labore hendrerit id malesuada interdum quisque mollis mattis ut.\nAliqua congue egestas bibendum pretium semper id vulputate eleifend lorem vestibulum auctor. Euismod eleifend eiusmod at vel suspendisse donec commodo sit volutpat do. Iaculis accimsan ipsum suscipit labore mattis sollicitudin sit eiusmod turpis. Nisi pulvinar vulputate scelerisque feugiat posuere a dui faucibus. Nam ultrices magnis netus sed faucibus aliqua interdum laoreet consectetur eleifend. Malesuada elit enim ullamcorper commodo eget pretium penatibus vitae vestibulum iaculis.\n",
    "ref": "/post/post_1/"
  },{
    "title": "Contact",
    "date": "January 1, 0001",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
