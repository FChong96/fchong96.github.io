<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alert on Feng Chong</title>
    <link>https://fchong96.github.io/tags/alert/</link>
    <description>Recent content in alert on Feng Chong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fchong96.github.io/tags/alert/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UIKit学习—如何弹出对话框</title>
      <link>https://fchong96.github.io/blog/dialogpopup/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fchong96.github.io/blog/dialogpopup/</guid>
      <description>最近开始阅读raywenderlich的iOS Apprentice1来学习UIKit 和 SwiftUI。 第一个app是Bullseye, 一个简单的小游戏，考验谁的估计更准确（类似于商场门口按10秒得优惠券的小游戏）。这也是我学习CS193P期间的补充。 首先要解决的就是弹出对话框的使用，本文通过简单的程序说明弹出式对话框的使用方法。
 前言 弹出式对话框在iOS中经常使用，无论是APP Store中下载App时，还是输错密码的提示，很多地方都在使用。而且其程序比较简单，一般封装起来使用。
本文只是以例子的形式简单的实现弹出对话框的使用。
准备 操作系统：macOS Catalina 10.15.6
Xcode: Version 11.3.1
开始 首先我们需要新建一个Xcode project，选择iOS下Single View App模版，然后给文件命名。注意 Language选择 Swift ，Use Interface选择 Storyboard ，因为我们要使用UIKit，而且不需要 Use Core Data, Include Unit Tests 和 Include UI Tests。
创建成功后，我们首先要创建一个按键来触发弹出对话框的动作，就像你在手机上滑或者按按键一样。我们找到左侧Project navigator，点击Main.storyboard来编辑我们的视图。点击右上边工具条中加号图案，会显示出可用的控件列表。我们只需要添加一个按键（Button）即可。将它拖到Interface Bulider中会显示出其与边缘的位置关系，我们可以靠左边，靠右边或者放在视图正中间。双击Button 可以给它重命名（它默认叫Button，我改为了Tap）。通过调整它边框的大小我们可以调整它所占的范围。字体可以在右边栏Button中Font中修改。
点击左侧Project navigator中ViewController.swift来添加本次实验的程序。ViewController.swift是一段swift程序来允许我们对视图进行控制。每一个视图都应该对应一个swift文件。 在class ViewController中添加下列程序：
@IBAction func showAlert(){ } 这时候运行程序是没有反应的。因为我们按键Tap没有与showAlert之间建立联系，同时我们的showAlert中也没有要执行的内容。
在Main.storyboard中选中Tap按住control键将其拖到View Controller Scence中的View Controller, 会弹Action Segue，点击Sent Events中的项选中showAlert，就可以建立 Tap与showAlert之间的联系（在右边栏箭头型图标栏中可以看到或着此时打开ViewController.swift我们也能看到showAlert()行前面的数字变成了实心圆）。
 或者双屏显示内容的话之间将其指向ViewController.swift 中（这样会自动添加程序，给函数命名，不用自己添加之前的程序，就直接建立了按键与程序之间的联系）。
 然后在ViewController.swift中添加程序：
@IBAction func showAlert(){ let alert = UIAlertController(title: &amp;quot;需验证&amp;quot;, message: &amp;quot;请确认下载&amp;quot;, preferredStyle: .</description>
    </item>
    
  </channel>
</rss>